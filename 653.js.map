{"version":3,"file":"653.js","mappings":"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AG,mBAAmB;IAC/B;AACR;AACA;IACQ,IAAI,CAACkJ,EAAE,GAAG,KAAK;IACf;IACA;IACA;IACA,IAAI,IAAI,CAACF,MAAM,IAAI,GAAG,IAAI,IAAI,CAACA,MAAM,GAAG,GAAG,EAAE;MACzC,IAAI,CAAC/I,OAAO,GAAI,mCAAkCiD,IAAI,CAACsE,GAAG,IAAI,eAAgB,EAAC;IACnF,CAAC,MACI;MACD,IAAI,CAACvH,OAAO,GAAI,6BAA4BiD,IAAI,CAACsE,GAAG,IAAI,eAAgB,KAAItE,IAAI,CAAC8F,MAAO,IAAG9F,IAAI,CAAC+F,UAAW,EAAC;IAChH;IACA,IAAI,CAACxK,KAAK,GAAGyE,IAAI,CAACzE,KAAK,IAAI,IAAI;EACnC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+K,OAAOA,CAAC3D,OAAO,EAAE8B,IAAI,EAAE;EAC5B,OAAO;IACHA,IAAI;IACJjG,OAAO,EAAEmE,OAAO,CAACnE,OAAO;IACxBsG,OAAO,EAAEnC,OAAO,CAACmC,OAAO;IACxByB,OAAO,EAAE5D,OAAO,CAAC4D,OAAO;IACxBzE,MAAM,EAAEa,OAAO,CAACb,MAAM;IACtB4C,cAAc,EAAE/B,OAAO,CAAC+B,cAAc;IACtCE,YAAY,EAAEjC,OAAO,CAACiC,YAAY;IAClCD,eAAe,EAAEhC,OAAO,CAACgC;EAC7B,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM6B,UAAU,CAAC;EACbjI,WAAWA,CAACkI,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACA;AACJ;AACA;AACA;AACA;AAC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","sources":["./node_modules/rxjs/dist/esm/internal/observable/empty.js","./node_modules/rxjs/dist/esm/internal/operators/concatMap.js","./node_modules/rxjs/dist/esm/internal/operators/defaultIfEmpty.js","./node_modules/rxjs/dist/esm/internal/operators/filter.js","./node_modules/rxjs/dist/esm/internal/operators/finalize.js","./node_modules/rxjs/dist/esm/internal/operators/first.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js","./node_modules/rxjs/dist/esm/internal/operators/mergeMap.js","./node_modules/rxjs/dist/esm/internal/operators/switchMap.js","./node_modules/rxjs/dist/esm/internal/operators/take.js","./node_modules/rxjs/dist/esm/internal/operators/tap.js","./node_modules/rxjs/dist/esm/internal/operators/throwIfEmpty.js","./node_modules/rxjs/dist/esm/internal/util/EmptyError.js","./node_modules/@angular/common/fesm2022/http.mjs"],"sourcesContent":["import { Observable } from '../Observable';\nexport const EMPTY = new Observable((subscriber) => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { mergeMap } from './mergeMap';\nimport { isFunction } from '../util/isFunction';\nexport function concatMap(project, resultSelector) {\n    return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function defaultIfEmpty(defaultValue) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            subscriber.next(value);\n        }, () => {\n            if (!hasValue) {\n                subscriber.next(defaultValue);\n            }\n            subscriber.complete();\n        }));\n    });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function filter(predicate, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value)));\n    });\n}\n","import { operate } from '../util/lift';\nexport function finalize(callback) {\n    return operate((source, subscriber) => {\n        try {\n            source.subscribe(subscriber);\n        }\n        finally {\n            subscriber.add(callback);\n        }\n    });\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\nexport function first(predicate, defaultValue) {\n    const hasDefaultValue = arguments.length >= 2;\n    return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    const buffer = [];\n    let active = 0;\n    let index = 0;\n    let isComplete = false;\n    const checkComplete = () => {\n        if (isComplete && !buffer.length && !active) {\n            subscriber.complete();\n        }\n    };\n    const outerNext = (value) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n    const doInnerSub = (value) => {\n        expand && subscriber.next(value);\n        active++;\n        let innerComplete = false;\n        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, (innerValue) => {\n            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n            if (expand) {\n                outerNext(innerValue);\n            }\n            else {\n                subscriber.next(innerValue);\n            }\n        }, () => {\n            innerComplete = true;\n        }, undefined, () => {\n            if (innerComplete) {\n                try {\n                    active--;\n                    while (buffer.length && active < concurrent) {\n                        const bufferedValue = buffer.shift();\n                        if (innerSubScheduler) {\n                            executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                        }\n                        else {\n                            doInnerSub(bufferedValue);\n                        }\n                    }\n                    checkComplete();\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }\n        }));\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {\n        isComplete = true;\n        checkComplete();\n    }));\n    return () => {\n        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n    };\n}\n","import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent = Infinity) {\n    if (isFunction(resultSelector)) {\n        return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n    return operate((source, subscriber) => {\n        let innerSubscriber = null;\n        let index = 0;\n        let isComplete = false;\n        const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            let innerIndex = 0;\n            const outerIndex = index++;\n            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, () => {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function take(count) {\n    return count <= 0\n        ?\n            () => EMPTY\n        : operate((source, subscriber) => {\n            let seen = 0;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                if (++seen <= count) {\n                    subscriber.next(value);\n                    if (count <= seen) {\n                        subscriber.complete();\n                    }\n                }\n            }));\n        });\n}\n","import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n    const tapObserver = isFunction(observerOrNext) || error || complete\n        ?\n            { next: observerOrNext, error, complete }\n        : observerOrNext;\n    return tapObserver\n        ? operate((source, subscriber) => {\n            var _a;\n            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n            let isUnsub = true;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                var _a;\n                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n                subscriber.next(value);\n            }, () => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                subscriber.complete();\n            }, (err) => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n                subscriber.error(err);\n            }, () => {\n                var _a, _b;\n                if (isUnsub) {\n                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                }\n                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n            }));\n        })\n        :\n            identity;\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function throwIfEmpty(errorFactory = defaultErrorFactory) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            subscriber.next(value);\n        }, () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))));\n    });\n}\nfunction defaultErrorFactory() {\n    return new EmptyError();\n}\n","import { createErrorClass } from './createErrorClass';\nexport const EmptyError = createErrorClass((_super) => function EmptyErrorImpl() {\n    _super(this);\n    this.name = 'EmptyError';\n    this.message = 'no elements in sequence';\n});\n","/**\n * @license Angular v16.0.4\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, ɵInitialRenderPendingTasks, Inject, ɵRuntimeError, PLATFORM_ID, makeEnvironmentProviders, NgModule, TransferState, makeStateKey, ɵENABLED_SSR_FEATURES, APP_BOOTSTRAP_LISTENER, ApplicationRef } from '@angular/core';\nimport { of, Observable, from } from 'rxjs';\nimport { concatMap, filter, map, finalize, switchMap, tap, first } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.entries(headers).forEach(([name, values]) => {\n                    let headerValues;\n                    if (typeof values === 'string') {\n                        headerValues = [values];\n                    }\n                    else if (typeof values === 'number') {\n                        headerValues = [values.toString()];\n                    }\n                    else {\n                        headerValues = values.map((value) => value.toString());\n                    }\n                    if (headerValues.length > 0) {\n                        const key = name.toLowerCase();\n                        this.headers.set(key, headerValues);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClient }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n    return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n    // clang-format off\n    return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n    // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nconst HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n    let chain = null;\n    return (req, handler) => {\n        if (chain === null) {\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n        }\n        const pendingTasks = inject(ɵInitialRenderPendingTasks);\n        const taskId = pendingTasks.add();\n        return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n    };\n}\nclass HttpInterceptorHandler extends HttpHandler {\n    constructor(backend, injector) {\n        super();\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n        this.pendingTasks = inject(ɵInitialRenderPendingTasks);\n    }\n    handle(initialRequest) {\n        if (this.chain === null) {\n            const dedupedInterceptorFns = Array.from(new Set([\n                ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n                ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n            ]));\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n        }\n        const taskId = this.pendingTasks.add();\n        return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest))\n            .pipe(finalize(() => this.pendingTasks.remove(taskId)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpInterceptorHandler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.EnvironmentInjector }]; } });\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* HttpStatusCode.Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: JsonpClientBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n    if (req.method === 'JSONP') {\n        return inject(JsonpClientBackend).handle(req);\n    }\n    // Fall through for normal HTTP requests.\n    return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: JsonpInterceptor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new ɵRuntimeError(-2800 /* RuntimeErrorCode.MISSING_JSONP_MODULE */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n        }\n        // Check whether this factory has a special function to load an XHR implementation\n        // for various non-browser environments. We currently limit it to only `ServerXhr`\n        // class, which needs to load an XHR implementation.\n        const xhrFactory = this.xhrFactory;\n        const source = xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n        return source.pipe(switchMap(() => {\n            // Everything happens on Observable subscription.\n            return new Observable((observer) => {\n                // Start by setting up the XHR object with request method, URL, and withCredentials\n                // flag.\n                const xhr = xhrFactory.build();\n                xhr.open(req.method, req.urlWithParams);\n                if (req.withCredentials) {\n                    xhr.withCredentials = true;\n                }\n                // Add all the requested headers.\n                req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n                // Add an Accept header if one isn't present already.\n                if (!req.headers.has('Accept')) {\n                    xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n                }\n                // Auto-detect the Content-Type header if one isn't present already.\n                if (!req.headers.has('Content-Type')) {\n                    const detectedType = req.detectContentTypeHeader();\n                    // Sometimes Content-Type detection fails.\n                    if (detectedType !== null) {\n                        xhr.setRequestHeader('Content-Type', detectedType);\n                    }\n                }\n                // Set the responseType if one was requested.\n                if (req.responseType) {\n                    const responseType = req.responseType.toLowerCase();\n                    // JSON responses need to be processed as text. This is because if the server\n                    // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                    // xhr.response will be null, and xhr.responseText cannot be accessed to\n                    // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                    // is parsed by first requesting text and then applying JSON.parse.\n                    xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n                }\n                // Serialize the request body if one is present. If not, this will be set to null.\n                const reqBody = req.serializeBody();\n                // If progress events are enabled, response headers will be delivered\n                // in two events - the HttpHeaderResponse event and the full HttpResponse\n                // event. However, since response headers don't change in between these\n                // two events, it doesn't make sense to parse them twice. So headerResponse\n                // caches the data extracted from the response whenever it's first parsed,\n                // to ensure parsing isn't duplicated.\n                let headerResponse = null;\n                // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n                // state, and memoizes it into headerResponse.\n                const partialFromXhr = () => {\n                    if (headerResponse !== null) {\n                        return headerResponse;\n                    }\n                    const statusText = xhr.statusText || 'OK';\n                    // Parse headers from XMLHttpRequest - this step is lazy.\n                    const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                    // Read the response URL from the XMLHttpResponse instance and fall back on the\n                    // request URL.\n                    const url = getResponseUrl(xhr) || req.url;\n                    // Construct the HttpHeaderResponse and memoize it.\n                    headerResponse =\n                        new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                    return headerResponse;\n                };\n                // Next, a few closures are defined for the various events which XMLHttpRequest can\n                // emit. This allows them to be unregistered as event listeners later.\n                // First up is the load event, which represents a response being fully available.\n                const onLoad = () => {\n                    // Read response state from the memoized partial data.\n                    let { headers, status, statusText, url } = partialFromXhr();\n                    // The body will be read out if present.\n                    let body = null;\n                    if (status !== 204 /* HttpStatusCode.NoContent */) {\n                        // Use XMLHttpRequest.response if set, responseText otherwise.\n                        body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                    }\n                    // Normalize another potential bug (this one comes from CORS).\n                    if (status === 0) {\n                        status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n                    }\n                    // ok determines whether the response will be transmitted on the event or\n                    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                    // but a successful status code can still result in an error if the user\n                    // asked for JSON data and the body cannot be parsed as such.\n                    let ok = status >= 200 && status < 300;\n                    // Check whether the body needs to be parsed as JSON (in many cases the browser\n                    // will have done that already).\n                    if (req.responseType === 'json' && typeof body === 'string') {\n                        // Save the original body, before attempting XSSI prefix stripping.\n                        const originalBody = body;\n                        body = body.replace(XSSI_PREFIX, '');\n                        try {\n                            // Attempt the parse. If it fails, a parse error should be delivered to the\n                            // user.\n                            body = body !== '' ? JSON.parse(body) : null;\n                        }\n                        catch (error) {\n                            // Since the JSON.parse failed, it's reasonable to assume this might not have\n                            // been a JSON response. Restore the original body (including any XSSI prefix)\n                            // to deliver a better error response.\n                            body = originalBody;\n                            // If this was an error request to begin with, leave it as a string, it\n                            // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                            if (ok) {\n                                // Even though the response status was 2xx, this is still an error.\n                                ok = false;\n                                // The parse error contains the text of the body that failed to parse.\n                                body = { error, text: body };\n                            }\n                        }\n                    }\n                    if (ok) {\n                        // A successful response is delivered on the event stream.\n                        observer.next(new HttpResponse({\n                            body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                        // The full body has been received and delivered, no further events\n                        // are possible. This request is complete.\n                        observer.complete();\n                    }\n                    else {\n                        // An unsuccessful request is delivered on the error channel.\n                        observer.error(new HttpErrorResponse({\n                            // The error in this case is the response body (error from the server).\n                            error: body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                    }\n                };\n                // The onError callback is called when something goes wrong at the network level.\n                // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n                // transmitted on the error channel.\n                const onError = (error) => {\n                    const { url } = partialFromXhr();\n                    const res = new HttpErrorResponse({\n                        error,\n                        status: xhr.status || 0,\n                        statusText: xhr.statusText || 'Unknown Error',\n                        url: url || undefined,\n                    });\n                    observer.error(res);\n                };\n                // The sentHeaders flag tracks whether the HttpResponseHeaders event\n                // has been sent on the stream. This is necessary to track if progress\n                // is enabled since the event will be sent on only the first download\n                // progress event.\n                let sentHeaders = false;\n                // The download progress event handler, which is only registered if\n                // progress events are enabled.\n                const onDownProgress = (event) => {\n                    // Send the HttpResponseHeaders event if it hasn't been sent already.\n                    if (!sentHeaders) {\n                        observer.next(partialFromXhr());\n                        sentHeaders = true;\n                    }\n                    // Start building the download progress event to deliver on the response\n                    // event stream.\n                    let progressEvent = {\n                        type: HttpEventType.DownloadProgress,\n                        loaded: event.loaded,\n                    };\n                    // Set the total number of bytes in the event if it's available.\n                    if (event.lengthComputable) {\n                        progressEvent.total = event.total;\n                    }\n                    // If the request was for text content and a partial response is\n                    // available on XMLHttpRequest, include it in the progress event\n                    // to allow for streaming reads.\n                    if (req.responseType === 'text' && !!xhr.responseText) {\n                        progressEvent.partialText = xhr.responseText;\n                    }\n                    // Finally, fire the event.\n                    observer.next(progressEvent);\n                };\n                // The upload progress event handler, which is only registered if\n                // progress events are enabled.\n                const onUpProgress = (event) => {\n                    // Upload progress events are simpler. Begin building the progress\n                    // event.\n                    let progress = {\n                        type: HttpEventType.UploadProgress,\n                        loaded: event.loaded,\n                    };\n                    // If the total number of bytes being uploaded is available, include\n                    // it.\n                    if (event.lengthComputable) {\n                        progress.total = event.total;\n                    }\n                    // Send the event.\n                    observer.next(progress);\n                };\n                // By default, register for load and error events.\n                xhr.addEventListener('load', onLoad);\n                xhr.addEventListener('error', onError);\n                xhr.addEventListener('timeout', onError);\n                xhr.addEventListener('abort', onError);\n                // Progress events are only enabled if requested.\n                if (req.reportProgress) {\n                    // Download progress is always enabled if requested.\n                    xhr.addEventListener('progress', onDownProgress);\n                    // Upload progress depends on whether there is a body to upload.\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.addEventListener('progress', onUpProgress);\n                    }\n                }\n                // Fire the request, and notify the event stream that it was fired.\n                xhr.send(reqBody);\n                observer.next({ type: HttpEventType.Sent });\n                // This is the return from the Observable function, which is the\n                // request cancellation handler.\n                return () => {\n                    // On a cancellation, remove all registered event listeners.\n                    xhr.removeEventListener('error', onError);\n                    xhr.removeEventListener('abort', onError);\n                    xhr.removeEventListener('load', onLoad);\n                    xhr.removeEventListener('timeout', onError);\n                    if (req.reportProgress) {\n                        xhr.removeEventListener('progress', onDownProgress);\n                        if (reqBody !== null && xhr.upload) {\n                            xhr.upload.removeEventListener('progress', onUpProgress);\n                        }\n                    }\n                    // Finally, abort the in-flight request.\n                    if (xhr.readyState !== xhr.DONE) {\n                        xhr.abort();\n                    }\n                };\n            });\n        }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpXhrBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpXsrfCookieExtractor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }]; } });\nfunction xsrfInterceptorFn(req, next) {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n        lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next(req);\n    }\n    const token = inject(HttpXsrfTokenExtractor).getToken();\n    const headerName = inject(XSRF_HEADER_NAME);\n    // Be careful not to overwrite an existing header of the same name.\n    if (token != null && !req.headers.has(headerName)) {\n        req = req.clone({ headers: req.headers.set(headerName, token) });\n    }\n    return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpXsrfInterceptor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n    return {\n        ɵkind: kind,\n        ɵproviders: providers,\n    };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n */\nfunction provideHttpClient(...features) {\n    if (ngDevMode) {\n        const featureKinds = new Set(features.map(f => f.ɵkind));\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n            throw new Error(ngDevMode ?\n                `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n                '');\n        }\n    }\n    const providers = [\n        HttpClient,\n        HttpXhrBackend,\n        HttpInterceptorHandler,\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: xsrfInterceptorFn,\n            multi: true,\n        },\n        { provide: XSRF_ENABLED, useValue: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n    ];\n    for (const feature of features) {\n        providers.push(...feature.ɵproviders);\n    }\n    return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n        return {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: interceptorFn,\n            multi: true,\n        };\n    }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nfunction withInterceptorsFromDi() {\n    // Note: the legacy interceptor function is provided here via an intermediate token\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n    // included multiple times, all of the multi-provider entries will have the same instance of the\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n    // interceptors will not run multiple times.\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n        {\n            provide: LEGACY_INTERCEPTOR_FN,\n            useFactory: legacyInterceptorFnFactory,\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useExisting: LEGACY_INTERCEPTOR_FN,\n            multi: true,\n        }\n    ]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withXsrfConfiguration({ cookieName, headerName }) {\n    const providers = [];\n    if (cookieName !== undefined) {\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\n    }\n    if (headerName !== undefined) {\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\n    }\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withNoXsrfProtection() {\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n        {\n            provide: XSRF_ENABLED,\n            useValue: false,\n        },\n    ]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nfunction withJsonpSupport() {\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\n                if (ngDevMode && handlerFromParent === null) {\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n                }\n                return handlerFromParent;\n            },\n        },\n    ]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                withNoXsrfProtection().ɵproviders,\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: withXsrfConfiguration(options).ɵproviders,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientXsrfModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n            HttpXsrfInterceptor,\n            { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n            { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n            withXsrfConfiguration({\n                cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                headerName: XSRF_DEFAULT_HEADER_NAME,\n            }).ɵproviders,\n            { provide: XSRF_ENABLED, useValue: true },\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        }).ɵproviders,\n                        { provide: XSRF_ENABLED, useValue: true },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientModule, providers: [\n            provideHttpClient(withInterceptorsFromDi()),\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        provideHttpClient(withInterceptorsFromDi()),\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientJsonpModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n            withJsonpSupport().ɵproviders,\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.4\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        withJsonpSupport().ɵproviders,\n                    ],\n                }]\n        }] });\n\nconst CACHE_STATE = new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_STATE' : '');\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\nfunction transferCacheInterceptorFn(req, next) {\n    const { isCacheActive } = inject(CACHE_STATE);\n    // Stop using the cache if the application has stabilized, indicating initial rendering\n    // is complete.\n    if (!isCacheActive || !ALLOWED_METHODS.includes(req.method)) {\n        // Cache is no longer active or method is not HEAD or GET.\n        // Pass the request through.\n        return next(req);\n    }\n    const transferState = inject(TransferState);\n    const storeKey = makeCacheKey(req);\n    const response = transferState.get(storeKey, null);\n    if (response) {\n        // Request found in cache. Respond using it.\n        let body = response.body;\n        switch (response.responseType) {\n            case 'arraybuffer':\n                body = new TextEncoder().encode(response.body).buffer;\n                break;\n            case 'blob':\n                body = new Blob([response.body]);\n                break;\n        }\n        return of(new HttpResponse({\n            body,\n            headers: new HttpHeaders(response.headers),\n            status: response.status,\n            statusText: response.statusText,\n            url: response.url,\n        }));\n    }\n    // Request not found in cache. Make the request and cache it.\n    return next(req).pipe(tap((event) => {\n        if (event instanceof HttpResponse) {\n            transferState.set(storeKey, {\n                body: event.body,\n                headers: getHeadersMap(event.headers),\n                status: event.status,\n                statusText: event.statusText,\n                url: event.url || '',\n                responseType: req.responseType,\n            });\n        }\n    }));\n}\nfunction getHeadersMap(headers) {\n    const headersMap = {};\n    for (const key of headers.keys()) {\n        const values = headers.getAll(key);\n        if (values !== null) {\n            headersMap[key] = values;\n        }\n    }\n    return headersMap;\n}\nfunction makeCacheKey(request) {\n    // make the params encoded same as a url so it's easy to identify\n    const { params, method, responseType, url } = request;\n    const encodedParams = params.keys().sort().map((k) => `${k}=${params.getAll(k)}`).join('&');\n    const key = method + '.' + responseType + '.' + url + '?' + encodedParams;\n    const hash = generateHash(key);\n    return makeStateKey(hash);\n}\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value) {\n    let hash = 0;\n    for (const char of value) {\n        hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n    }\n    // Force positive number hash.\n    // 2147483647 = equivalent of Integer.MAX_VALUE.\n    hash += 2147483647 + 1;\n    return hash.toString();\n}\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nfunction withHttpTransferCache() {\n    return [\n        {\n            provide: CACHE_STATE,\n            useFactory: () => {\n                inject(ɵENABLED_SSR_FEATURES).add('httpcache');\n                return { isCacheActive: true };\n            }\n        },\n        {\n            provide: HTTP_ROOT_INTERCEPTOR_FNS,\n            useValue: transferCacheInterceptorFn,\n            multi: true,\n            deps: [TransferState, CACHE_STATE]\n        },\n        {\n            provide: APP_BOOTSTRAP_LISTENER,\n            multi: true,\n            useFactory: () => {\n                const appRef = inject(ApplicationRef);\n                const cacheState = inject(CACHE_STATE);\n                return () => {\n                    appRef.isStable.pipe(first((isStable) => isStable)).toPromise().then(() => {\n                        cacheState.isCacheActive = false;\n                    });\n                };\n            }\n        }\n    ];\n}\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, provideHttpClient, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler, withHttpTransferCache as ɵwithHttpTransferCache };\n"],"names":["Observable","EMPTY","subscriber","complete","empty","scheduler","emptyScheduled","schedule","mergeMap","isFunction","concatMap","project","resultSelector","operate","createOperatorSubscriber","defaultIfEmpty","defaultValue","source","hasValue","subscribe","value","next","filter","predicate","thisArg","index","call","finalize","callback","add","EmptyError","take","throwIfEmpty","identity","first","hasDefaultValue","arguments","length","pipe","v","i","map","innerFrom","executeSchedule","mergeInternals","concurrent","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","isComplete","checkComplete","outerNext","doInnerSub","push","innerComplete","innerValue","undefined","bufferedValue","shift","err","error","Infinity","a","b","ii","switchMap","innerSubscriber","unsubscribe","innerIndex","outerIndex","count","seen","tap","observerOrNext","tapObserver","_a","isUnsub","_b","errorFactory","defaultErrorFactory","createErrorClass","_super","EmptyErrorImpl","name","message","i0","Injectable","InjectionToken","inject","ɵInitialRenderPendingTasks","Inject","ɵRuntimeError","PLATFORM_ID","makeEnvironmentProviders","NgModule","TransferState","makeStateKey","ɵENABLED_SSR_FEATURES","APP_BOOTSTRAP_LISTENER","ApplicationRef","of","from","i1","DOCUMENT","ɵparseCookieValue","HttpHandler","HttpBackend","HttpHeaders","constructor","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","indexOf","slice","key","toLowerCase","trim","maybeSetNormalizedName","has","get","set","ngDevMode","assertValidHeaders","Object","entries","values","headerValues","toString","init","keys","Array","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","toDelete","existing","fn","isArray","Error","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","replace","param","eqIdx","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","encodeURIComponent","s","t","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","res","appendAll","_value","eKey","join","idx","splice","HttpContextToken","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","addBody","observe","HttpClient","handler","request","req","events$","handle","res$","event","head","jsonp","callbackParam","patch","post","put","_","ɵfac","HttpClient_Factory","ɵɵinject","_2","ɵprov","ɵɵdefineInjectable","factory","ɵsetClassMetadata","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","injector","runInContext","HTTP_INTERCEPTORS","HTTP_INTERCEPTOR_FNS","HTTP_ROOT_INTERCEPTOR_FNS","legacyInterceptorFnFactory","chain","interceptors","optional","reduceRight","pendingTasks","taskId","remove","HttpInterceptorHandler","backend","dedupedInterceptorFns","Set","nextSequencedFn","HttpInterceptorHandler_Factory","EnvironmentInjector","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","jsonpCallbackContext","window","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","observer","node","createElement","src","finished","data","cleanup","parentNode","removeChild","onLoad","then","onError","addEventListener","appendChild","Sent","removeListeners","script","implementation","createHTMLDocument","adoptNode","JsonpClientBackend_Factory","decorators","args","jsonpInterceptorFn","JsonpInterceptor","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","ɵloadImpl","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","abort","HttpXhrBackend_Factory","XhrFactory","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","providedIn","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","HttpXsrfCookieExtractor_Factory","xsrfInterceptorFn","lcUrl","startsWith","headerName","HttpXsrfInterceptor","HttpXsrfInterceptor_Factory","HttpFeatureKind","makeHttpFeature","kind","providers","ɵkind","ɵproviders","provideHttpClient","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","provide","useExisting","useValue","multi","useClass","feature","withInterceptors","interceptorFns","Interceptors","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","LegacyInterceptors","useFactory","withXsrfConfiguration","withNoXsrfProtection","withJsonpSupport","JsonpSupport","withRequestsMadeViaParent","RequestsMadeViaParent","handlerFromParent","skipSelf","HttpClientXsrfModule","disable","ngModule","withOptions","HttpClientXsrfModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","HttpClientModule","HttpClientModule_Factory","HttpClientJsonpModule","HttpClientJsonpModule_Factory","CACHE_STATE","ALLOWED_METHODS","transferCacheInterceptorFn","isCacheActive","includes","transferState","storeKey","makeCacheKey","TextEncoder","encode","getHeadersMap","headersMap","encodedParams","sort","k","hash","generateHash","char","Math","imul","charCodeAt","withHttpTransferCache","deps","appRef","cacheState","isStable","toPromise","ɵHttpInterceptingHandler","ɵHttpInterceptorHandler","ɵwithHttpTransferCache"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]}